package com.asg.yer.youzi.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.asg.yer.youzi.Others.CardGame;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_GAME".
*/
public class CardGameDao extends AbstractDao<CardGame, Long> {

    public static final String TABLENAME = "CARD_GAME";

    /**
     * Properties of entity CardGame.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OpponentsNum = new Property(1, Integer.class, "opponentsNum", false, "OPPONENTS_NUM");
        public final static Property StrCards = new Property(2, String.class, "strCards", false, "STR_CARDS");
    };


    public CardGameDao(DaoConfig config) {
        super(config);
    }
    
    public CardGameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_GAME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OPPONENTS_NUM\" INTEGER," + // 1: opponentsNum
                "\"STR_CARDS\" TEXT NOT NULL );"); // 2: strCards
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_GAME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardGame entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer opponentsNum = entity.getOpponentsNum();
        if (opponentsNum != null) {
            stmt.bindLong(2, opponentsNum);
        }
        stmt.bindString(3, entity.getStrCards());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardGame entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer opponentsNum = entity.getOpponentsNum();
        if (opponentsNum != null) {
            stmt.bindLong(2, opponentsNum);
        }
        stmt.bindString(3, entity.getStrCards());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CardGame readEntity(Cursor cursor, int offset) {
        CardGame entity = new CardGame( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // opponentsNum
            cursor.getString(offset + 2) // strCards
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardGame entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpponentsNum(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStrCards(cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CardGame entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CardGame entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
